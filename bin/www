#!/usr/bin/env node

/**
 * Module dependencies.
 */
const ssl_key = process.env.SSL_KEY_PATH;
const ssl_cert = process.env.SSL_CERT_PATH;
var app = require('../app');
var debug = require('debug')('blue-green-demo:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

const sslKeyPath = process.env.SSL_KEY_PATH;
const sslCertPath = process.env.SSL_CERT_PATH;
const sslCaPath = process.env.SSL_CA_PATH;

console.log("sslKeyPath: ", sslKeyPath);
const options = {};

if (sslKeyPath && sslCertPath) {
  options.key = fs.readFileSync(sslKeyPath);
  options.cert = fs.readFileSync(sslCertPath);

  if (sslCaPath) {
    options.ca = fs.readFileSync(sslCaPath);
  }
}

/**
 * Get port from environment and store in Express.
 */

console.log("PORT: ", process.env.PORT);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server;

if (options.key && options.cert) {
  console.log("Launching https server");
  server = https.createServer(options, app);
} else {
  console.log("Launching http server");
  server = http.createServer(options, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
